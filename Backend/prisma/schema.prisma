generator client{
    provider = "prisma-client-js"
}

datasource db{
    provider = "mongodb"
    url=env("MONGO_URL")


}
model Customer{
    id String   @id @default(auto()) @map("_id") @db.ObjectId
    FirstName String?
    LastName String?
    Gender String?
    Email String? @unique
    Password String?
    MobileNumber String? @unique
    NIC String? @unique
    Address String?
    BookingID Booking[]
    Complains Complain[]
    ServiceProvider Customer_Provider[]
    feedbackRating FeedbackRating[]
    refundRequests RefundRequests[]
}

enum BookingStatus {
    PENDING
    CANCELLED
    COMPLETED
}
enum PaymentStatus {
    PENDING
    CANCELLED
    REFUNDED
    COMPLETED
}
enum refundStatus {
    PENDING
    CANCELLED
    APPROVED
}

enum complianStatus {
    PENDING
    CANCELLED
    COMPLETED
}


model Category{
    CategoryID String   @id @default(auto()) @map("_id") @db.ObjectId
    Type String?
    service Service[]
    education Education[]

} 

model Education{
    EducationId String   @id @default(auto()) @map("_id") @db.ObjectId
    deliveryMode String?
    categoryID String @db.ObjectId
    syllabus Syllabus[]
    category Category @relation(fields: [categoryID],references: [CategoryID])
}

model Syllabus{
    SyllabusID String @id @default(auto()) @map("_id") @db.ObjectId
    Title String?
    Description String?
    educationID String @db.ObjectId
    education Education @relation(fields: [educationID],references: [EducationId])
    subjects    SyllabusSubject[]
}

model Subject{
    SubjectID String @id @default(auto()) @map("_id") @db.ObjectId
    Name String
    syllabuses  SyllabusSubject[]
    
}
model SyllabusSubject {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    syllabusID String @db.ObjectId
    subjectID  String @db.ObjectId
    syllabus   Syllabus @relation(fields: [syllabusID], references: [SyllabusID])
    subject    Subject  @relation(fields: [subjectID], references: [SubjectID])

    
    @@unique([syllabusID, subjectID])
}

model Complain{
    complainId String @id @default(auto()) @map("_id") @db.ObjectId
    Reason String?
    Status complianStatus @default(PENDING)
    CustomerId String @db.ObjectId
    Customers Customer @relation(fields: [CustomerId],references: [id])

}

model Service{
    ServiceID String   @id @default(auto()) @map("_id") @db.ObjectId
    ServiceName String
    Category String @db.ObjectId
    CommisionRate Int
    Description String
    category Category @relation(fields: [Category],references: [CategoryID])
    serviceProvider ServiceProvider[]
}

model Administrator{
    AdminID String   @id @default(auto()) @map("_id") @db.ObjectId
    Name String?
    Email String?@unique
    Password String?@unique
    MobileNumber String? @unique
    
}

model ServiceProvider {
  ProviderID        String            @id @default(auto()) @map("_id") @db.ObjectId
  FirstName         String?
  LastName          String?
  MobileNumber      String?           @unique
  NIC               String?           @unique
  Address           String?
  email             String?           @unique
  password          String            @unique
  Availability      Boolean           @default(true)
  ServiceType       String            @db.ObjectId
  hourlyRate        Float?            // Add this field for hourly rate
  bookings          Booking[]
  serviceProvider_Reports ServiceProvider_Reports?
  schedule          Schedule?
  customer          Customer_Provider[]
  providerSalary    ProviderSalary?
  service           Service           @relation(fields: [ServiceType], references: [ServiceID])
  languagesSpoken   LanguageSpoken[]  // Add relation for languages spoken
}

model LanguageSpoken {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  provider        String          @db.ObjectId
  language        String          // e.g., SINHALA, ENGLISH, TAMIL
  serviceProvider ServiceProvider @relation(fields: [provider], references: [ProviderID])

  @@unique([provider, language])
}

model Customer_Provider{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    customer String @db.ObjectId
    provider String @db.ObjectId
    serviceProvider ServiceProvider @relation(fields: [provider],references: [ProviderID])
    customers Customer @relation(fields: [customer],references: [id])
    @@unique([customer, provider])
}
model ServiceProvider_Reports{
    ReportID String   @id @default(auto()) @map("_id") @db.ObjectId
    Provider  String @db.ObjectId @unique
    BirthCertificate String?
    PoliceReport String?
    NIC_Copy String?
    serviceProvider ServiceProvider @relation(fields: [Provider],references: [ProviderID])
}

model Booking{
    BookingID String   @id @default(auto()) @map("_id") @db.ObjectId
    AgreementDuration String?
    Booking_Service String?
    Provider String @db.ObjectId
    MonthlyPayment Float?
    BookingDate DateTime @default(now())
    Status BookingStatus @default(PENDING)
    CustomerID String @db.ObjectId
    customer Customer   @relation(fields: [CustomerID],references:[id])
    serviceProvider  ServiceProvider   @relation(fields: [Provider],references:[ProviderID])
    payment Payment[]   
}

model PaymentMethod{
    MethodId String @id @default(auto()) @map("_id") @db.ObjectId
    PaymentType String?
    Description String?
    payment Payment[]

}

model Payment{
    paymentID String @id @default(auto()) @map("_id") @db.ObjectId
    PaymentDate DateTime @default(now())
    Amount Float?
    PaymentMethod String @db.ObjectId
    BookingId String @db.ObjectId
    Status PaymentStatus @default(PENDING)
    paymentMethod PaymentMethod @relation(fields: [PaymentMethod],references: [MethodId])
    booking Booking @relation(fields: [BookingId],references: [BookingID])
    refundRequests RefundRequests?
}

model Schedule{
    scheduleId String   @id @default(auto()) @map("_id") @db.ObjectId
    scheduleDate DateTime @default(now())
    AgreementTime String?
    startDate String?
    provider String @db.ObjectId @unique
    serviceProvider ServiceProvider @relation(fields: [provider],references: [ProviderID])
}

model FeedbackRating{
    feedbackID String @id @default(auto()) @map("_id") @db.ObjectId
    feedback String?
    Rating Int?
    RatingCustomer String @db.ObjectId
    customer Customer @relation(fields: [RatingCustomer],references: [id])
}
model ProviderSalary{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    provider String @db.ObjectId @unique
    EPF Float?
    ETF Float?
    totSalary Float?
    serviceProvider ServiceProvider @relation(fields: [provider],references: [ProviderID])


}
model InFlow{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    flowDate DateTime?
    inflowItem String?
    Amount Float?
}
model OutFlow{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    OutDate DateTime?
    outFlowItem String?
    Amount Float?
}

model Revenue{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    Date DateTime? @default(now())
    Description String?
    Amount Float?
}

model Expenses{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    Date DateTime? @default(now())
    Expense String?
    Amount Float?
}
model Assests{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    Assests String?
    Amount Float?
}

model Liability{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    Liability String?
    Amount Float?
}
model profitLoss{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    month String @unique
    totalrevenue Float?
    totalExpence Float?
    NetAmount Float?
}
 model savedPaymentMethod{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    paymentMethod String?
    cardNumber String?
    cardHolderName String?

 }

 model RefundRequests{
    refundId String @id @default(auto())@map("_id") @db.ObjectId
    customerID String @db.ObjectId
    paymentId String @db.ObjectId @unique
    amount Float?
    reason String?
    requestAt DateTime @default(now())
    status refundStatus @default(PENDING)
    customer Customer @relation(fields: [customerID],references: [id])
    payment Payment @relation(fields: [paymentId],references: [paymentID])
 }

 model deductionRate{
    id String @id @default(auto())@map("_id") @db.ObjectId
    type String?
    rate Float?
 }






