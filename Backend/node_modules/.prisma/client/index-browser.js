
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.5.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.5.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  FirstName: 'FirstName',
  LastName: 'LastName',
  Gender: 'Gender',
  Email: 'Email',
  Password: 'Password',
  MobileNumber: 'MobileNumber',
  NIC: 'NIC',
  Address: 'Address'
};

exports.Prisma.CategoryScalarFieldEnum = {
  CategoryID: 'CategoryID',
  Type: 'Type'
};

exports.Prisma.EducationScalarFieldEnum = {
  EducationId: 'EducationId',
  deliveryMode: 'deliveryMode',
  categoryID: 'categoryID'
};

exports.Prisma.SyllabusScalarFieldEnum = {
  SyllabusID: 'SyllabusID',
  Title: 'Title',
  Description: 'Description',
  educationID: 'educationID'
};

exports.Prisma.SubjectScalarFieldEnum = {
  SubjectID: 'SubjectID',
  Name: 'Name'
};

exports.Prisma.SyllabusSubjectScalarFieldEnum = {
  id: 'id',
  syllabusID: 'syllabusID',
  subjectID: 'subjectID'
};

exports.Prisma.ComplainScalarFieldEnum = {
  complainId: 'complainId',
  Reason: 'Reason',
  Status: 'Status',
  CustomerId: 'CustomerId'
};

exports.Prisma.ServiceScalarFieldEnum = {
  ServiceID: 'ServiceID',
  ServiceName: 'ServiceName',
  Category: 'Category',
  CommisionRate: 'CommisionRate',
  Description: 'Description'
};

exports.Prisma.AdministratorScalarFieldEnum = {
  AdminID: 'AdminID',
  Name: 'Name',
  Email: 'Email',
  Password: 'Password',
  MobileNumber: 'MobileNumber'
};

exports.Prisma.ServiceProviderScalarFieldEnum = {
  ProviderID: 'ProviderID',
  FirstName: 'FirstName',
  LastName: 'LastName',
  MobileNumber: 'MobileNumber',
  NIC: 'NIC',
  Address: 'Address',
  email: 'email',
  password: 'password',
  Availability: 'Availability',
  ServiceType: 'ServiceType'
};

exports.Prisma.Customer_ProviderScalarFieldEnum = {
  id: 'id',
  customer: 'customer',
  provider: 'provider'
};

exports.Prisma.ServiceProvider_ReportsScalarFieldEnum = {
  ReportID: 'ReportID',
  Provider: 'Provider',
  BirthCertificate: 'BirthCertificate',
  PoliceReport: 'PoliceReport',
  NIC_Copy: 'NIC_Copy'
};

exports.Prisma.BookingScalarFieldEnum = {
  BookingID: 'BookingID',
  AgreementDuration: 'AgreementDuration',
  Booking_Service: 'Booking_Service',
  Provider: 'Provider',
  MonthlyPayment: 'MonthlyPayment',
  BookingDate: 'BookingDate',
  Status: 'Status',
  CustomerID: 'CustomerID'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  MethodId: 'MethodId',
  PaymentType: 'PaymentType',
  Description: 'Description'
};

exports.Prisma.PaymentScalarFieldEnum = {
  paymentID: 'paymentID',
  PaymentDate: 'PaymentDate',
  Amount: 'Amount',
  PaymentMethod: 'PaymentMethod',
  BookingId: 'BookingId'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  scheduleId: 'scheduleId',
  scheduleDate: 'scheduleDate',
  AgreementTime: 'AgreementTime',
  startDate: 'startDate',
  provider: 'provider'
};

exports.Prisma.FeedbackRatingScalarFieldEnum = {
  feedbackID: 'feedbackID',
  feedback: 'feedback',
  Rating: 'Rating',
  RatingCustomer: 'RatingCustomer'
};

exports.Prisma.ProviderSalaryScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  EPF: 'EPF',
  ETF: 'ETF',
  totSalary: 'totSalary'
};

exports.Prisma.InFlowScalarFieldEnum = {
  id: 'id',
  flowDate: 'flowDate',
  inflowItem: 'inflowItem',
  Amount: 'Amount'
};

exports.Prisma.OutFlowScalarFieldEnum = {
  id: 'id',
  OutDate: 'OutDate',
  outFlowItem: 'outFlowItem',
  Amount: 'Amount'
};

exports.Prisma.RevenueScalarFieldEnum = {
  id: 'id',
  Date: 'Date',
  Expense: 'Expense',
  Amount: 'Amount'
};

exports.Prisma.ExpensesScalarFieldEnum = {
  id: 'id',
  Date: 'Date',
  Expense: 'Expense',
  Amount: 'Amount'
};

exports.Prisma.AssestsScalarFieldEnum = {
  id: 'id',
  Assests: 'Assests',
  Amount: 'Amount'
};

exports.Prisma.LiabilityScalarFieldEnum = {
  id: 'id',
  Liability: 'Liability',
  Amount: 'Amount'
};

exports.Prisma.ProfitLossScalarFieldEnum = {
  id: 'id',
  month: 'month',
  revenue: 'revenue',
  NetAmount: 'NetAmount'
};

exports.Prisma.SavedPaymentMethodScalarFieldEnum = {
  id: 'id',
  paymentMethod: 'paymentMethod',
  cardNumber: 'cardNumber',
  cardHolderName: 'cardHolderName'
};

exports.Prisma.RefundRequestsScalarFieldEnum = {
  refundId: 'refundId',
  customerID: 'customerID',
  paymentId: 'paymentId',
  amount: 'amount',
  status: 'status',
  reason: 'reason',
  requestAt: 'requestAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.complianStatus = exports.$Enums.complianStatus = {
  PENDING: 'PENDING',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.refundStatus = exports.$Enums.refundStatus = {
  PENDING: 'PENDING',
  CANCELLED: 'CANCELLED',
  APPROVED: 'APPROVED'
};

exports.Prisma.ModelName = {
  Customer: 'Customer',
  Category: 'Category',
  Education: 'Education',
  Syllabus: 'Syllabus',
  Subject: 'Subject',
  SyllabusSubject: 'SyllabusSubject',
  Complain: 'Complain',
  Service: 'Service',
  Administrator: 'Administrator',
  ServiceProvider: 'ServiceProvider',
  Customer_Provider: 'Customer_Provider',
  ServiceProvider_Reports: 'ServiceProvider_Reports',
  Booking: 'Booking',
  PaymentMethod: 'PaymentMethod',
  Payment: 'Payment',
  Schedule: 'Schedule',
  FeedbackRating: 'FeedbackRating',
  ProviderSalary: 'ProviderSalary',
  InFlow: 'InFlow',
  OutFlow: 'OutFlow',
  Revenue: 'Revenue',
  Expenses: 'Expenses',
  Assests: 'Assests',
  Liability: 'Liability',
  profitLoss: 'profitLoss',
  savedPaymentMethod: 'savedPaymentMethod',
  RefundRequests: 'RefundRequests'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
